import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          shadowColor: colorScheme.errorContainer,
          elevation: 16,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray40001,
          fontSize: 16.fSize,
          fontFamily: 'Proxima Nova',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray40001,
          fontSize: 14.fSize,
          fontFamily: 'Proxima Nova',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray700,
          fontSize: 12.fSize,
          fontFamily: 'Proxima Nova',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.errorContainer.withOpacity(1),
          fontSize: 28.fSize,
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w800,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 12.fSize,
          fontFamily: 'Proxima Nova',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: colorScheme.primary.withOpacity(0.55),
          fontSize: 11.fSize,
          fontFamily: 'Proxima Nova',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 20.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 16.fSize,
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 14.fSize,
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF002060),
    primaryContainer: Color(0XFF597393),

    // Error colors
    errorContainer: Color(0X3D1D334F),
    onErrorContainer: Color(0X8CFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFF00D9D5),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber900 => Color(0XFFFF7200);

  // Black
  Color get black90019 => Color(0X19000000);

  // BlueGray
  Color get blueGray900 => Color(0XFF333333);

  // Cyan
  Color get cyan100 => Color(0XFFBBFFFF);

  // Gray
  Color get gray100 => Color(0XFFEFF1FB);
  Color get gray400 => Color(0XFFBDBDBD);
  Color get gray40001 => Color(0XFFBEBEBE);
  Color get gray50 => Color(0XFFFAFAFA);
  Color get gray500 => Color(0XFF999999);
  Color get gray5001 => Color(0XFFF5F8FA);
  Color get gray5002 => Color(0XFFF7F8FC);
  Color get gray600 => Color(0XFF828282);
  Color get gray700 => Color(0XFF5E5E5E);
  Color get gray70001 => Color(0XFF6A6A6A);

  // Green
  Color get green900 => Color(0XFF007025);
  Color get greenA100 => Color(0XFFB3FFCB);

  // Indigo
  Color get indigo50 => Color(0XFFEBEDF7);
  Color get indigo900 => Color(0XFF1A3E78);

  // LightBlue
  Color get lightBlue700 => Color(0XFF0582CA);

  // Orange
  Color get orange50 => Color(0XFFF5EFE0);

  // Red
  Color get redA700 => Color(0XFFEA0004);
  Color get redA70001 => Color(0XFFFE0000);

  // Yellow
  Color get yellowA400 => Color(0XFFFFEA00);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
